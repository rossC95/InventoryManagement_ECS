package ECS;

import java.awt.Color;
import java.sql.*;
import javax.swing.JOptionPane;


public class ECSManagerInterface extends javax.swing.JFrame {
    Employee empForm = new Employee();
    boolean viewingLimits = false;
    /**
     * Creates new form ECSManagerInterface
     */
    public ECSManagerInterface(Employee emp) {
        initComponents();
        this.setLocationRelativeTo(null); // center form
        // placeholder for maintenance worker username (class.getUsername())
        this.lblUserName.setText(lblUserName.getText() + " " + emp.getLastName() + ", " + emp.getFirstName());
        //pass employee to global variable
        empForm = emp;
        //load current inventory
        loadInventory();
        //make table uneditable
        tblEquipment.setDefaultEditor(Object.class, null);
        //hide filter features
        lblShowLastOrders.setVisible(false);
        btnFilter.setVisible(false);
        txfDate.setVisible(false);
    }
    public ECSManagerInterface() {
        initComponents();
        this.setLocationRelativeTo(null); // center form
        // placeholder for maintenance worker username (class.getUsername())
        this.lblUserName.setText(lblUserName.getText() + " %s");
        loadInventory();
        lblShowLastOrders.setVisible(false);
        btnFilter.setVisible(false);
        txfDate.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlTitle = new javax.swing.JPanel();
        btnLogout = new javax.swing.JButton();
        lblECS = new javax.swing.JLabel();
        lblUserName = new javax.swing.JLabel();
        pnlMain = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblEquipment = new javax.swing.JTable();
        btnGenerateReport = new javax.swing.JButton();
        btnViewEquipLog = new javax.swing.JButton();
        btnAddItem = new javax.swing.JButton();
        btnRemoveItem = new javax.swing.JButton();
        btnUpdateItem = new javax.swing.JButton();
        btnReload = new javax.swing.JButton();
        btnChangeLimit = new javax.swing.JButton();
        btnViewLimits = new javax.swing.JButton();
        pnlFilter = new javax.swing.JPanel();
        btnFilter = new javax.swing.JButton();
        lblShowLastOrders = new javax.swing.JLabel();
        txfDate = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Equipment Checkout System (Management)");
        setIconImage((new javax.swing.ImageIcon(getClass().getResource("/ECS/resources/ECS_Icon.png"))).getImage());
        setResizable(false);

        pnlTitle.setBackground(new java.awt.Color(38, 64, 86));
        pnlTitle.setPreferredSize(new java.awt.Dimension(878, 55));

        btnLogout.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnLogout.setText("Logout");
        btnLogout.setToolTipText("Logout from the ECS");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        lblECS.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblECS.setForeground(new java.awt.Color(255, 255, 255));
        lblECS.setText("Equipment Checkout System");

        lblUserName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblUserName.setForeground(new java.awt.Color(236, 240, 241));
        lblUserName.setText("Name:");

        javax.swing.GroupLayout pnlTitleLayout = new javax.swing.GroupLayout(pnlTitle);
        pnlTitle.setLayout(pnlTitleLayout);
        pnlTitleLayout.setHorizontalGroup(
            pnlTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblECS)
                .addGap(133, 133, 133)
                .addComponent(lblUserName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnLogout)
                .addContainerGap())
        );
        pnlTitleLayout.setVerticalGroup(
            pnlTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblECS, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addGroup(pnlTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnLogout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblUserName)))
                .addContainerGap())
        );

        pnlMain.setBackground(new java.awt.Color(248, 148, 6));

        tblEquipment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item ID", "Item Name", "Item Quantity", "Item Description"
            }
        ));
        tblEquipment.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblEquipment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblEquipmentMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblEquipment);

        btnGenerateReport.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnGenerateReport.setText("Generate Report");
        btnGenerateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateReportActionPerformed(evt);
            }
        });

        btnViewEquipLog.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnViewEquipLog.setText("View Equipment Log");
        btnViewEquipLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewEquipLogActionPerformed(evt);
            }
        });

        btnAddItem.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAddItem.setText("Add Item");
        btnAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddItemActionPerformed(evt);
            }
        });

        btnRemoveItem.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnRemoveItem.setText("Remove Item");
        btnRemoveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveItemActionPerformed(evt);
            }
        });

        btnUpdateItem.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnUpdateItem.setText("Update Item");
        btnUpdateItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateItemActionPerformed(evt);
            }
        });

        btnReload.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnReload.setText("Reload Inventory");
        btnReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReloadActionPerformed(evt);
            }
        });

        btnChangeLimit.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnChangeLimit.setText("Update Limits");
        btnChangeLimit.setToolTipText("Select an item in the limit list to modify the limit");
        btnChangeLimit.setEnabled(false);
        btnChangeLimit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeLimitActionPerformed(evt);
            }
        });

        btnViewLimits.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnViewLimits.setText("View Limits");
        btnViewLimits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewLimitsActionPerformed(evt);
            }
        });

        pnlFilter.setBackground(new java.awt.Color(248, 148, 6));

        btnFilter.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnFilter.setText("Filter");
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });

        lblShowLastOrders.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblShowLastOrders.setForeground(new java.awt.Color(236, 240, 241));
        lblShowLastOrders.setText("Filter by date (MM/DD/YYYY):");

        javax.swing.GroupLayout pnlFilterLayout = new javax.swing.GroupLayout(pnlFilter);
        pnlFilter.setLayout(pnlFilterLayout);
        pnlFilterLayout.setHorizontalGroup(
            pnlFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFilterLayout.createSequentialGroup()
                        .addComponent(txfDate, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnFilter)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(lblShowLastOrders, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlFilterLayout.setVerticalGroup(
            pnlFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFilterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblShowLastOrders)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFilter)
                    .addComponent(txfDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnViewEquipLog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnReload, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnRemoveItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAddItem, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnUpdateItem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnGenerateReport, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnViewLimits, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnChangeLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnViewEquipLog)
                            .addComponent(btnAddItem)
                            .addComponent(btnUpdateItem)
                            .addComponent(btnChangeLimit))
                        .addGap(20, 20, 20)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRemoveItem)
                            .addComponent(btnReload)
                            .addComponent(btnGenerateReport)
                            .addComponent(btnViewLimits)))
                    .addComponent(pnlFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 889, Short.MAX_VALUE)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // JButton - Logout from main interface
        LoginForm lgf = new LoginForm();
        lgf.setLocationRelativeTo(null);
        lgf.setVisible(true);
        lgf.pack();
        this.dispose();
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddItemActionPerformed
        AddItem addItem = new AddItem();
        addItem.setLocationRelativeTo(null);
        addItem.setVisible(true);
        addItem.pack(); 
    }//GEN-LAST:event_btnAddItemActionPerformed

    private void btnReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReloadActionPerformed
        loadInventory();
    }//GEN-LAST:event_btnReloadActionPerformed

    private void btnRemoveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveItemActionPerformed
        if (tblEquipment.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select an item to remove", "Error: No item selected", JOptionPane.ERROR_MESSAGE);
        } else {
            String idToDelete = tblEquipment.getModel().getValueAt(tblEquipment.getSelectedRow(), 0).toString();
            int confirmationRemove = JOptionPane.showConfirmDialog(null, "Are you sure you would like to remove item ID#" + idToDelete + "?");
            if (confirmationRemove == 0) {
                boolean successRemove = removeItem(idToDelete);
                if (successRemove) {
                    JOptionPane.showMessageDialog(this, "Successfully removed item from database");
                    loadInventory();
                } else {
                    JOptionPane.showMessageDialog(this, "Error: Could not remove from inventory", "Error: Inventory unmodified", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Database unmodified");
            }
        }
    }//GEN-LAST:event_btnRemoveItemActionPerformed

    private void btnGenerateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateReportActionPerformed
        // PDFGenerator
        try{
           String returnMsg = PDFGenerator.GeneratePDF(); 
           JOptionPane.showMessageDialog(this, returnMsg, "Sucess", JOptionPane.INFORMATION_MESSAGE);
        } catch(Exception e){
            JOptionPane.showMessageDialog(this, "Error: " + e, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnGenerateReportActionPerformed

    private void btnUpdateItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateItemActionPerformed
        if (tblEquipment.getSelectionModel().isSelectionEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select an item to update", "Error: No item selected", JOptionPane.ERROR_MESSAGE);
        } else {
            int ID = Integer.parseInt(tblEquipment.getModel().getValueAt(tblEquipment.getSelectedRow(), 0).toString());
            String name = tblEquipment.getModel().getValueAt(tblEquipment.getSelectedRow(), 1).toString();
            int quantity = Integer.parseInt(tblEquipment.getModel().getValueAt(tblEquipment.getSelectedRow(), 2).toString());
            String description = tblEquipment.getModel().getValueAt(tblEquipment.getSelectedRow(), 3).toString();
            Item item = new Item(ID, quantity, name, description);
            UpdateItem updateItem = new UpdateItem(item);
            updateItem.setLocationRelativeTo(null);
            updateItem.setVisible(true);
            updateItem.pack();
        }
    }//GEN-LAST:event_btnUpdateItemActionPerformed

    private void btnViewEquipLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewEquipLogActionPerformed
        lblShowLastOrders.setVisible(true);
        btnFilter.setVisible(true);
        txfDate.setText("");
        txfDate.setVisible(true);
        txfDate.requestFocus();
        this.getRootPane().setDefaultButton(btnFilter);
        btnRemoveItem.setEnabled(false);
        btnUpdateItem.setEnabled(false);
        pnlFilter.setBackground(new Color(38,64,86));
        viewLog();
    }//GEN-LAST:event_btnViewEquipLogActionPerformed

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        if (txfDate.getText().length() == 10) {
            filterDate(txfDate.getText());
        }
    }//GEN-LAST:event_btnFilterActionPerformed

    private void btnChangeLimitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeLimitActionPerformed
        if (tblEquipment.getSelectionModel().isSelectionEmpty()) {
            UpdateLimits updateLimit = new UpdateLimits();
            updateLimit.setLocationRelativeTo(null);
            updateLimit.setVisible(true);
            updateLimit.pack();      
        } else {
            int resID = Integer.parseInt(tblEquipment.getModel().getValueAt(tblEquipment.getSelectedRow(), 0).toString());
            int itemID = Integer.parseInt(tblEquipment.getModel().getValueAt(tblEquipment.getSelectedRow(), 1).toString());
            int empID = -1;
            boolean restrictType;
            if ((tblEquipment.getModel().getValueAt(tblEquipment.getSelectedRow(), 4)) != null) { 
                empID = Integer.parseInt(tblEquipment.getModel().getValueAt(tblEquipment.getSelectedRow(), 4).toString());
                restrictType = true; //individual restriction
            } else {
                restrictType = false; //global restriction
            }
            int itemRestrict = Integer.parseInt(tblEquipment.getModel().getValueAt(tblEquipment.getSelectedRow(), 3).toString());
            UpdateLimits updateLimit = new UpdateLimits(resID, itemID, itemRestrict, restrictType, empID);
            updateLimit.setLocationRelativeTo(null);
            updateLimit.setVisible(true);
            updateLimit.pack();         
        }
        btnChangeLimit.setEnabled(false);
        viewingLimits = false;
        loadInventory();
        btnViewLimits.setText("View Limits");
    }//GEN-LAST:event_btnChangeLimitActionPerformed

    private void btnViewLimitsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewLimitsActionPerformed
        if (!viewingLimits) {
            viewLimits();
            btnChangeLimit.setEnabled(false);
            btnViewLimits.setText("Add Limit");
        } else {
            UpdateLimits updateLimit = new UpdateLimits();
            updateLimit.setLocationRelativeTo(null);
            updateLimit.setVisible(true);
            updateLimit.pack();
            btnChangeLimit.setEnabled(false);
            btnViewLimits.setText("View Limits");
            loadInventory();
        }
    }//GEN-LAST:event_btnViewLimitsActionPerformed

    private void tblEquipmentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblEquipmentMouseClicked
        if (viewingLimits) {
            btnChangeLimit.setEnabled(true);
        }
    }//GEN-LAST:event_tblEquipmentMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ECSManagerInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ECSManagerInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ECSManagerInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ECSManagerInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ECSManagerInterface().setVisible(false);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddItem;
    private javax.swing.JButton btnChangeLimit;
    private javax.swing.JButton btnFilter;
    private javax.swing.JButton btnGenerateReport;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnReload;
    private javax.swing.JButton btnRemoveItem;
    private javax.swing.JButton btnUpdateItem;
    private javax.swing.JButton btnViewEquipLog;
    private javax.swing.JButton btnViewLimits;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblECS;
    private javax.swing.JLabel lblShowLastOrders;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JPanel pnlFilter;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlTitle;
    private javax.swing.JTable tblEquipment;
    private javax.swing.JTextField txfDate;
    // End of variables declaration//GEN-END:variables
    public void loadInventory() {
        //disable/enable buttons on interface
        viewingLimits = false;
        btnViewLimits.setText("View Limits");
        btnChangeLimit.setEnabled(false);
        lblShowLastOrders.setVisible(false);
        btnFilter.setVisible(false);
        txfDate.setVisible(false);
        pnlFilter.setBackground(new Color(248,148,6));
        btnRemoveItem.setEnabled(true);
        btnUpdateItem.setEnabled(true);
        
        DataIO data = new DataIO();
        try {
            tblEquipment.setModel(data.loadInventory());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error: Could not load inventory", "Error: Network connection", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException cex) {
            JOptionPane.showMessageDialog(this, "Error: Could not load inventory", "Error: SQL Driver", JOptionPane.ERROR_MESSAGE);
        }
    }
    public boolean removeItem(String itemID) {
        DataIO data = new DataIO();
        try {
            data.removeItem(itemID);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error: Could not remove from inventory", "Error: Network connection", JOptionPane.ERROR_MESSAGE);
            return false;
        } catch (ClassNotFoundException cex) {
            JOptionPane.showMessageDialog(this, "Error: Could not remove from inventory", "Error: SQL Driver", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
    public void filterDate(String date) {
        DataIO data = new DataIO();
        date = date.substring(6,10) + "/" + date.substring(0,2) + "/" + date.substring(3,5);
        try {         
            tblEquipment.setModel(data.filterOrders(date));
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error: Could not load data", "Error: Network connection", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException cex) {
            JOptionPane.showMessageDialog(this, "Error: Could not load data", "Error: SQL Driver", JOptionPane.ERROR_MESSAGE);
        }
    }
    public void viewLimits() {
        //disable/enable buttons on interface
        btnRemoveItem.setEnabled(false);
        btnUpdateItem.setEnabled(false);
        lblShowLastOrders.setVisible(false);
        btnFilter.setVisible(false);
        txfDate.setVisible(false);
        pnlFilter.setBackground(new Color(248,148,6));
        viewingLimits = true;
        
        DataIO data = new DataIO();
        try {         
            tblEquipment.setModel(data.loadLimits());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error: Could not load data", "Error: Network connection", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException cex) {
            JOptionPane.showMessageDialog(this, "Error: Could not load data", "Error: SQL Driver", JOptionPane.ERROR_MESSAGE);
        }
    }
    public void viewLog() {
        viewingLimits = false;
        btnViewLimits.setText("View Limits");
        btnChangeLimit.setEnabled(false);
        // database connection object
        DataIO data = new DataIO();
        try {
            tblEquipment.setModel(data.viewLog());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Error: Could not load inventory", "Error: Network connection", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException cex) {
            JOptionPane.showMessageDialog(this, "Error: Could not load inventory", "Error: SQL Driver", JOptionPane.ERROR_MESSAGE);
        }  
    }
}
